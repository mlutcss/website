@use 'sass:meta';
@use 'sass:map';
@use 'sass:list';
@use 'sass:string';

@use 'forward-tools' as ml;

// mk-ar
//
// Generate at-rules from the string with space separated abbreviations. Used [syntax](section-concepts.html#kssref-concepts-at_rules) for at-rules from utilities.
//
// ```scss
//@include ml.mk-ar('@s:apcr4/3@:dm') using ($ar) {
// 	.block {
// 		display: inline-grid;
// 	}
//}
//
//// CSS
//@supports (aspect-ratio: 4/3) {
// 	@media (display-mode: fullscreen) {
// 		.block {
// 			display: inline-grid;
// 		}
// 	}
//}
// ```
//
// $at-rules - string with abbreviations
// $this-util = null - utility for which the at-rules will be generated.<br> This is a map in format `('name': '', 'value': '')`
// @content - CSS rules that will be placed into at-rules
//
// Styleguide: sass-tools.mixins.ar.mk_ar

@mixin mk-ar($at-rules, $this-util: null) {
	$abbr-list: ml.str-split($at-rules, ' ');

	@each $key, $value in map.get(ml.$at-rules-cfg, 'keywords') {
		@if meta.type-of($value) == 'string' {
			$value: map.keys(map.get(ml.$at-rules-cfg, $value));
		}

		$abbr-list: ml.replace-keyword($abbr-list, $key, $value);
	}

	@each $item in $abbr-list {
		$ar-list: ml.str-split($item, ml.$tAAr);

		@if list.nth($ar-list, 1) == '' {
			$ar-list: ml.remove-nth($ar-list, 1);
		}

		@include -generate-ar($item, $this-util, $ar-list, 1, list.length($ar-list)) {
			@content($item);
		}
	}
}

@mixin -generate-ar($at-rules, $this-util, $ar-list, $cur-index, $last-index) {
	$item: list.nth($ar-list, $cur-index);
	$ar-alias: list.nth(ml.str-split($item, ml.$tAAnd), 1);
	$ar-name: ml.ls-find(
		map.keys(ml.$at-rules-db), meta.get-function('-is-ar-alias'), $ar-alias
	);
	$converter: null;
	$ar-str: $item;

	@if string.index($at-rules, ml.$tAAr) == 1 or $cur-index > 1 {
		@if not $ar-name {
			@error 'At-rule for alias `#{$ar-alias}` is not defined';
		}

		$converter: map.get(ml.$at-rules-db, $ar-name, 'converter');
		$ar-str: string.slice($item, string.length($ar-alias) + 2);
	} @else {
		$ar-name: 'media';
		$converter: meta.get-function('convert-ar-bp', false, ml);
	}

	@#{$ar-name} #{meta.call($converter, $ar-str, $this-util)} {
		@if $cur-index < $last-index {
			@include -generate-ar($at-rules, $this-util, $ar-list, $cur-index + 1, $last-index) {
				@content;
			}
		} @else {
			@content;
		}
	}
}

@function -is-ar-alias($name, $i, $alias) {
	@return (
		($alias == '' and map.get(ml.$at-rules-db, $name, 'default')) or
		map.get(ml.$at-rules-db, $name, 'alias') == $alias
	);
}

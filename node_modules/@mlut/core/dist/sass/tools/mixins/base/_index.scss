@use 'sass:meta';
@use 'sass:map';
@use 'sass:list';
@use 'sass:math';
@use 'sass:string';

@use 'forward-tools' as ml;

@forward 'mk-ar';
@forward 'mk-state';

// At-Rules
//
// At-Rules mixins.
//
// Styleguide: sass-tools.mixins.ar

// bp
//
// Mixin for creation media queries with breakpoints. You can use [syntax](section-concepts.html#kssref-concepts-at_rules-bp) for breakpoints from utilities or one-two arbitrary numbers. When using numbers:
// - one number: `min-width` query
// - two from zero: `max-width`
// - two numbers: range
// ```scss
// @include ml.bp('<sm,md:lg') {
//		.inp--common {
//			padding-left: 48px;
//		}
// }
//
// @include ml.bp(0 600px) {
//		.btn__icon {
//			margin-left: 18px;
//		}
// }
//
// @include ml.bp(16em 32em) {
//		.btn__icon {
//			margin-top: 8px;
//		}
// }
//
// // CSS
// @media (max-width: 519px), (min-width: 768px) and (max-width: 991px) {
//		.inp--common {
//			padding-left: 48px;
//		}
// }
//
// @media (max-width: 599px) {
//		.btn__icon {
//			margin-left: 18px;
//		}
// }
//
// @media (min-width: 16em) and (max-width: 31.94em) {
//		.btn__icon {
//			margin-top: 8px;
//		}
// }
// ```
//
// $bp - string in syntax for breakpoins or list with numbers.
// @content - CSS relus that will be placed into mediaquery.
//
// Styleguide: sass-tools.mixins.ar.bp

@mixin bp($bp) {
	$bp-type: meta.type-of($bp);
	$mq-str: '';

	@if $bp-type == 'string' {
		$mq-str: ml.convert-ar-bp($bp);
	} @else if $bp-type == 'number' {
		$mq-str: '(min-width: #{$bp})';
	} @else if $bp-type == 'list' {
		$from: list.nth($bp, 1);
		$to: list.nth($bp, 2);
		$to: $to - ml.bp-value-diff($to);

		$mq-str: if(
			$from == 0,
			'(max-width: #{$to})',
			'(min-width: #{$from}) and (max-width: #{$to})'
		);
	} @else {
		@error 'Wrong type of argument $bp: `#{$bp-type}`. Expected `string`, `number` or numbers `list`';
	}

	@media #{$mq-str} {
		@content;
	}
}

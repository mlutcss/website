@use 'sass:meta';
@use 'sass:map';
@use 'sass:math';
@use 'sass:string';
@use 'sass:list';

@use 'forward-tools' as ml;

// Custom units
//
// Functions for working with custom units.
//
// Styleguide: sass-tools.functions.custom_units

// su
//
// Converts space units to CSS value.
// ```scss
//@debug ml.su(3u); // 0.75rem
//@debug ml.su(4); // 1rem
// ```
//
// $n - unitless number or number with `u` unit
// $data = () - service argument for provide any data
//
// Styleguide: sass-tools.functions.custom_units.su

@function su($n, $data: ()) {
	@if meta.type-of($n) != 'number' {
		@return ml.error(
			'Wrong type of argument $n: `#{meta.type-of($n)}`. Expected `number`'
		);
	}

	@if math.unit($n) == 'u' {
		$n: math.div($n, 1u);
	}

	@return ml.$su * $n;
}

// gg
//
// Converts grid gutter to CSS value.
// ```scss
//@debug ml.gg(5); // calc(var(--ml-gg) * 5)
//@debug ml.gg(1gg); // var(--ml-gg)
// ```
//
// $n - unitless number or number with `gg` unit
// $data = () - service argument for provide any data
//
// Styleguide: sass-tools.functions.custom_units.gg

@function gg($n, $data: ()) {
	@if meta.type-of($n) != 'number' {
		@return ml.error(
			'Wrong type of argument $n: `#{meta.type-of($n)}`. Expected `number`'
		);
	}

	@if math.unit($n) == 'gg' {
		$n: math.div($n, 1gg);
	}

	@return string.unquote(
		'calc(var(#{map.get(ml.$general-cfg, "css-vars", "gg")}) * #{$n})'
	);
}

ml.$general-cfg: map.set(
	ml.$general-cfg, 'custom-unit-values', 'gg', meta.get-function('gg', false)
);

$-gtr-fallback-rem: ml.px2rem(ml.$gs-default-gtr);

// TODO: remove unused code
@function gg-fallback($util, $util-value, $css-value, $important) {
	$value-part-init: 'calc(var(#{ml.css-var("gg")}';

	@if not string.index(meta.inspect($css-value), $value-part-init) {
		@return null;
	}

	$def-unit: map.get(ml.$utils-db, 'utils', 'registry', $util, 'default-unit');

	$value-part: $value-part-init + '#{$def-unit and "-" + $def-unit}) * ';
	$fallback-list: ();
	$multi-sep: list.separator($css-value);

	$value-parts: (
		(
			$value-part,
			string.length($value-part),
			if(
				$def-unit == 'rem',
				$-gtr-fallback-rem,
				ml.$gs-default-gtr
			)
		),
	);

	@if map.get(ml.$utils-db, 'utils', 'registry', $util, 'directions') {
		$value-part: $value-part-init + '-rem) * ';
		$value-parts: list.append(
			$value-parts,
			(
				$value-part,
				string.length($value-part),
				$-gtr-fallback-rem,
			)
		);
	}

	@each $list in $css-value {
		$converted-list: ();

		@each $item in $list {
			@if meta.type-of($item) == 'string' {
				@each $part, $length, $fallback in $value-parts {
					@if ml.str-starts($item, $part) {
						$converted-list: list.append(
							$converted-list,
							ml.str2n(string.slice($item, $length + 1)) * $fallback
						);
					}
				}
			} @else {
				$converted-list: list.append($converted-list, $item);
			}
		}

		$fallback-list: list.append($fallback-list, $converted-list, $multi-sep);
	}

	@return $fallback-list $important;
}

@if ml.$css-vars-fallback {
	$-utils-registry: ();

	@each $item in map.get(ml.$utils-cfg, 'gg-fallback-list') {
		$props-map: ();
		$props-list: ml.util-prop($item);

		@each $item in $props-list {
			$props-map: map.set(
				$props-map, $item, meta.get-function('gg-fallback', false)
			);
		}

		$-utils-registry: map.set(
			$-utils-registry,
			$item,
			(
				'preset-properties': $props-map,
				'properties': $props-list
			)
		);
	}

	ml.$utils-db: map.deep-merge(
		ml.$utils-db,
		(
			'utils': ('registry': $-utils-registry)
		)
	);
}

@function gc($n, $data: ()) {
	@if math.unit($n) == 'gc' {
		$n: math.div($n, 1gc);
	}

	@return var(
		#{ml.$cv-pref + if(map.get($data, 'util') == 'Ml', 'gsof', 'gscf')},
		#{math.div($n, ml.$gs-columns) * 100%}
	);
}

@function -gc-prop($util, $value, $css-value, $important) {
	$n: ml.str2n($value);

	@return if(
		meta.type-of($n) == 'number' and math.unit($n) == 'gc',
		math.div($n, 1gc),
		null
	);
}

@function -gc-fallback($util, $value, $css-value, $important) {
	$n: ml.str2n($value);

	@if meta.type-of($n) == 'number' and math.unit($n) == 'gc' {
		$cols: math.div($n, 1gc);

		@return calc(
			(math.div($cols, ml.$gs-columns) * 100%) -
			ml.$gs-default-gtr * if($util == 'Ml', -1, 2)
		);
	}

	@return null;
}

@if ml.$legacy-grid-system {
	ml.$general-cfg: map.set(
		ml.$general-cfg, 'custom-unit-values', 'gc', meta.get-function('gc', false)
	);

	ml.$utils-db: map.deep-merge(
		ml.$utils-db,
		('utils': (
			'registry': (
				'W': (
					'preset-properties': (
						ml.$cv-pref + 'gsc': meta.get-function('-gc-prop'),
						// space in key is needed to add the second fallback
						' width': meta.get-function('-gc-fallback'),
					)
				),
				'Ml': (
					'preset-properties': (
						ml.$cv-pref + 'gso': meta.get-function('-gc-prop'),
						' margin-left': meta.get-function('-gc-fallback'),
					)
				)
			)
		))
	);
}

@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:math';
@use 'sass:string';

@use '../forward-tools' as ml;

// Value transformers
//
// Available transformers:
// ```scss
//@debug ml.transform-uv-gradiend();
// ```
//
// $value - value for transforming
// $data = () - map with data required for transforming
//
/// Styleguide: sass-tools.functions.high.utils.value_transformers

$-directions: map.values(ml.$main-directions);

@function gradient($values, $data: ()) {
	$first-list: list.nth($values, 1);

	@if list.index($-directions, list.nth($first-list, 1)) {
		$first-list: list.join(to, $first-list);
	}

	@return meta.call(
		// TODO: add cache with frequently used CSS functions
		meta.get-function(
			map.get(
				ml.$utils-db, 'utils', 'registry', map.get($data, 'name'), 'css-function'
			),
			true
		),
		list.set-nth($values, 1, $first-list)
	);
}

@function to-css-fn($values, $data: ()) {
	$result: ();

	@each $item in if(
		list.separator($values) == comma,
		$values, ($values,)
	) {
		// maybe worth doing it more readable
		$result: list.append(
			$result,
			meta.call(
				meta.get-function(
					map.get(
						ml.$utils-db, 'utils', 'registry', map.get($data, 'name'), 'css-function'
					),
					true
				),
				$item
			)
		);
	}

	@return $result;
}
